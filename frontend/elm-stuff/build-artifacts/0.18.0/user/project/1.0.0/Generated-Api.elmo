var _user$project$Generated_Api$deleteUsersByUserId = function (capture_userId) {
	return _elm_lang$http$Http$request(
		{
			method: 'DELETE',
			headers: {ctor: '[]'},
			url: A2(
				_elm_lang$core$String$join,
				'/',
				{
					ctor: '::',
					_0: 'http://localhost:8000/api',
					_1: {
						ctor: '::',
						_0: 'users',
						_1: {
							ctor: '::',
							_0: _elm_lang$http$Http$encodeUri(
								_elm_lang$core$Basics$toString(capture_userId)),
							_1: {ctor: '[]'}
						}
					}
				}),
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectJson(_elm_lang$core$Json_Decode$string),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _user$project$Generated_Api$encodeUser = function (x) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: function (_p0) {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						_elm_lang$core$Json_Encode$null,
						A2(_elm_lang$core$Maybe$map, _elm_lang$core$Json_Encode$int, _p0));
				}(x.id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'username',
					_1: _elm_lang$core$Json_Encode$string(x.username)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'age',
						_1: _elm_lang$core$Json_Encode$int(x.age)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'email',
							_1: _elm_lang$core$Json_Encode$string(x.email)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Generated_Api$User = F4(
	function (a, b, c, d) {
		return {id: a, username: b, age: c, email: d};
	});
var _user$project$Generated_Api$decodeUser = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'email',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'age',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'username',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'id',
				_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$int),
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Generated_Api$User)))));
var _user$project$Generated_Api$getUsers = _elm_lang$http$Http$request(
	{
		method: 'GET',
		headers: {ctor: '[]'},
		url: A2(
			_elm_lang$core$String$join,
			'/',
			{
				ctor: '::',
				_0: 'http://localhost:8000/api',
				_1: {
					ctor: '::',
					_0: 'users',
					_1: {ctor: '[]'}
				}
			}),
		body: _elm_lang$http$Http$emptyBody,
		expect: _elm_lang$http$Http$expectJson(
			_elm_lang$core$Json_Decode$list(_user$project$Generated_Api$decodeUser)),
		timeout: _elm_lang$core$Maybe$Nothing,
		withCredentials: false
	});
var _user$project$Generated_Api$postUsers = function (body) {
	return _elm_lang$http$Http$request(
		{
			method: 'POST',
			headers: {ctor: '[]'},
			url: A2(
				_elm_lang$core$String$join,
				'/',
				{
					ctor: '::',
					_0: 'http://localhost:8000/api',
					_1: {
						ctor: '::',
						_0: 'users',
						_1: {ctor: '[]'}
					}
				}),
			body: _elm_lang$http$Http$jsonBody(
				_user$project$Generated_Api$encodeUser(body)),
			expect: _elm_lang$http$Http$expectJson(_user$project$Generated_Api$decodeUser),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
